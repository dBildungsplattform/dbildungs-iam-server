apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "common.names.name" . }}-backend
  namespace: {{ template "common.names.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: server-backend
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.backend.maxUnavailable }}
      maxSurge: {{ .Values.backend.maxSurge }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "common.names.name" . }}
      app.kubernetes.io/component: server-backend
  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: server-backend
    spec:
      automountServiceAccountToken: false
      initContainers:
        {{- if .Values.kafka.initEnabled }}
        - name: "{{ template "common.names.name" . }}-kafka-topics-create"
          image: "{{ .Values.kafka.initImage.repository }}:{{ .Values.kafka.initImage.tag }}"
          imagePullPolicy: {{ .Values.kafka.initImage.pullPolicy | default "Always" }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          command: [ "sh", "/init/create_topics.sh", "/init/topics.txt" ]
          envFrom:
            - configMapRef:
                name:  {{ template "common.names.name" $ }}-kafka-envs-configmap
          env:
            - name: KAFKA_SSL_ENABLED
              value: "true"  # set in values
            - name: KAFKA_SSL_CA_PATH
              value: /tls/ca.pem
            - name: KAFKA_SSL_CERT_PATH
              value: /tls/client-cert.pem
            - name: KAFKA_SSL_KEY_PATH
              value: /tls/client-key.pem
          volumeMounts:
            - name: kafka-init-volume
              mountPath: /init
              readOnly: true
            - name: dbildungs-iam-kafka-tls
              readOnly: true
              mountPath: /tls
          resources: {{- toYaml .Values.backend.resources | nindent 12 }}
        {{ end }}
        {{- if .Values.backend.dbmigration.enabled }}
        - name: "{{ template "common.names.name" . }}-db-migration-apply"
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy | default "Always" }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          command: {{ .Values.backend.dbmigration.command | toJson }}
          env:
            {{- include "dbildungs-iam-server-backend-envs" . | indent  12 }}
              {{- if .Values.backend.extraEnvVars }}
              {{ toYaml .Values.backend.extraEnvVars | nindent 12 }}
              {{- end }}
            {{- if .Values.kafka.sslEnabled }}
            - name: KAFKA_SSL_ENABLED
              value: "true"  # set in values
            - name: KAFKA_SSL_CA_PATH
              value: /tls/ca.pem
            - name: KAFKA_SSL_CERT_PATH
              value: /tls/client-cert.pem
            - name: KAFKA_SSL_KEY_PATH
              value: /tls/client-key.pem
            - name: TLS_KEYSTORE
              value: /jks/client.keystore.jks
            - name: TLS_TRUSTSTORE
              value: /jks/client.truststore.jks
            - name: TLS_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dbildungs-iam-kafka-tls
                  key: keystore-password
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "common.names.name" . }}
          volumeMounts:
            {{- toYaml .Values.backend.volumeMounts | nindent 12 }}
            - name: dbildungs-iam-kafka-tls
              readOnly: true
              mountPath: /tls
            - name: jks
              mountPath: /jks
            - name: keystore-password
              readOnly: true
              mountPath: /keystore-password.txt
              subPath: keystore-password
          resources: {{- toYaml .Values.backend.resources | nindent 12 }}
        {{ end }}
        {{- if .Values.backend.keycloakdatamigration.enabled }}
        - name: "{{ template "common.names.name" . }}-keycloak-data-migration"
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy | default "Always" }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          command: {{ .Values.backend.keycloakdatamigration.command | toJson }}
          env:
            {{- include "dbildungs-iam-server-backend-envs" . | indent  12 }}
            {{- if .Values.backend.extraEnvVars }}
            {{ toYaml .Values.backend.extraEnvVars | nindent 12 }}
            {{- end }}
            {{- if .Values.kafka.sslEnabled }}
            - name: KAFKA_SSL_ENABLED
              value: "true"  # set in values
            - name: KAFKA_SSL_CA_PATH
              value: /tls/ca.pem
            - name: KAFKA_SSL_CERT_PATH
              value: /tls/client-cert.pem
            - name: KAFKA_SSL_KEY_PATH
              value: /tls/client-key.pem
            - name: TLS_KEYSTORE
              value: /jks/client.keystore.jks
            - name: TLS_TRUSTSTORE
              value: /jks/client.truststore.jks
            - name: TLS_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dbildungs-iam-kafka-tls
                  key: keystore-password
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "common.names.name" . }}
          volumeMounts:
            {{- toYaml .Values.backend.volumeMounts | nindent 12 }}
            - name: dbildungs-iam-kafka-tls
              readOnly: true
              mountPath: /tls
            - name: jks
              mountPath: /jks
            - name: keystore-password
              readOnly: true
              mountPath: /keystore-password.txt
              subPath: keystore-password
          resources: {{- toYaml .Values.backend.resources | nindent 12 }}
        {{ end }}
        {{- if .Values.backend.dbseeding.enabled }}
        - name: db-seeding
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{.Values.imagePullPolicy | default "Always"}}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          command: {{ .Values.backend.dbseeding.command | toJson }}
          envFrom:
            - configMapRef:
                name: {{ template "common.names.name" . }}
          env: {{- include "dbildungs-iam-server-backend-envs" . | indent  12}}
          {{- if .Values.kafka.sslEnabled }}
            - name: KAFKA_SSL_ENABLED
              value: "true"  # set in values
            - name: KAFKA_SSL_CA_PATH
              value: /tls/ca.pem
            - name: KAFKA_SSL_CERT_PATH
              value: /tls/client-cert.pem
            - name: KAFKA_SSL_KEY_PATH
              value: /tls/client-key.pem
            - name: TLS_KEYSTORE
              value: /jks/client.keystore.jks
            - name: TLS_TRUSTSTORE
              value: /jks/client.truststore.jks
            - name: TLS_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dbildungs-iam-kafka-tls
                  key: keystore-password
            {{- end }}
          volumeMounts:
            {{- toYaml .Values.backend.volumeMounts | nindent 12 }}
            - name: dbildungs-iam-kafka-tls
              readOnly: true
              mountPath: /tls
            - name: jks
              mountPath: /jks
            - name: keystore-password
              readOnly: true
              mountPath: /keystore-password.txt
              subPath: keystore-password
          resources: {{- toYaml .Values.backend.resources | nindent 12 }}
        {{ end }}
      containers:
        - name: "{{ template "common.names.name" . }}-backend"
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy | default "Always"}}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          ports:
            - name: web
              containerPort: {{ .Values.backend.containerPorts.http }}
              protocol: TCP
          env:
            {{- include "dbildungs-iam-server-backend-envs" . | nindent 12 }}
            {{- if .Values.backend.extraEnvVars }}
            {{ toYaml .Values.backend.extraEnvVars | nindent 12 }}
            {{- end }}
          {{- if .Values.kafka.sslEnabled }}
            - name: KAFKA_SSL_ENABLED
              value: "true"  # set in values
            - name: KAFKA_SSL_CA_PATH
              value: /tls/ca.pem
            - name: KAFKA_SSL_CERT_PATH
              value: /tls/client-cert.pem
            - name: KAFKA_SSL_KEY_PATH
              value: /tls/client-key.pem
            - name: TLS_KEYSTORE
              value: /jks/client.keystore.jks
            - name: TLS_TRUSTSTORE
              value: /jks/client.truststore.jks
            - name: TLS_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dbildungs-iam-kafka-tls
                  key: keystore-password
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "common.names.name" . }}
          volumeMounts:
            {{- toYaml .Values.backend.volumeMounts | nindent 12 }}
            {{- with .Values.backend.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            - name: dbildungs-iam-kafka-tls
              readOnly: true
              mountPath: /tls
            - name: jks
              mountPath: /jks
            - name: keystore-password
              readOnly: true
              mountPath: /keystore-password.txt
              subPath: keystore-password
          resources: {{- toYaml .Values.backend.resources | nindent 12 }}
          startupProbe: {{- omit .Values.backend.startupProbe "enabled" | toYaml | nindent 12 }}
          livenessProbe: {{- omit .Values.backend.livenessProbe "enabled" | toYaml | nindent 12 }}
          readinessProbe: {{- omit .Values.backend.readinessProbe "enabled" | toYaml | nindent 12 }}
      restartPolicy: {{ .Values.restartPolicy }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "common.names.name" . }}
        - name: secret-volume
          secret:
            secretName: {{ default .Values.auth.existingSecret .Values.auth.secretName }}
        {{if and .Values.kafka.initEnabled .Values.kafka.sslEnabled }}
        - name: kafka-init-volume
          configMap:
            name: {{ template "common.names.name" $ }}-kafka-init-configmap
            defaultMode: 0555
        - name: dbildungs-iam-kafka-tls
          secret:
            secretName: dbildungs-iam-kafka-tls
            defaultMode: 420
        - name: jks
          emptyDir: {}
        - name: keystore-password
          secret:
            secretName: dbildungs-iam-kafka-tls
            items:
              - key: keystore-password
                path: keystore-password
        {{- end }}
        - name: migration-volume
          configMap:
            name: {{ template "common.names.name" . }}-backend-migration
        - name: keycloak-migration-volume
          configMap:
            name: {{ template "common.names.name" . }}-backend-keycloak-migration
        {{ if .Values.backend.dbseeding.enabled }}
        - name: seeding-volume
          configMap:
            name: {{ template "common.names.name" . }}-backend-seeding
        {{- end }}
        {{- with .Values.backend.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
