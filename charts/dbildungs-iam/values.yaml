image:
  repository: ghcr.io/dbildungsplattform/dbildungs-iam-server
  tag: ""
  pullPolicy: Always

environment: prod

secrets:
  name: dbildungs-iam-secrets
configmap:
  name: dbildungs-iam-configmap
# If we're running inside an environment with a Prometheus-Operator installed we configure a service monitor
enableServiceMonitor: false

enabledcontainerSecurityContext: true
containerSecurityContext:
  #runAsUser: 1000
  #runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
      type: RuntimeDefault
  
database:
  name: ""
namespace: ""
replicaCount: 1

enabledserviceport: true
ports:
  - port: 6379
    targetPort: redis-port
    protocol: TCP
    name: redis-port

redisinitContainer:
  - name: copy-tls-data
    image: alpine
    #command: ["/bin/sh","-c", "apk add --no-cache openssl bash;/bin/bash /tls/copy-tls.sh"]
    volumeMounts:
      - mountPath: "/tls"
        name: tls-data
      - mountPath: "/data"
        name: data
rediscontainer: 
  image:
    name: redis
    repository: redis
    tag: "7.2.2"
    pullPolicy: IfNotPresent
  volumeMounts:
    - mountPath: "/data"
      name: data
  ports:
    - name: redis-port
      containerPort: 6379
      protocol: TCP
  args:
    - "/data/tls/redis.conf"
  livenessProbe:
    tcpSocket:
      port: 6379
    initialDelaySeconds: 15
    timeoutSeconds: 2
  readinessProbe:
    tcpSocket:
      port: 6379
    initialDelaySeconds: 5
    timeoutSeconds: 1
  startupProbe:
    tcpSocket:
      port: 6379
    failureThreshold: 30
    periodSeconds: 10

ingress:
  ingressClassName: nginx  
  pathType: Prefix  
  portnumber: 80 
  automountServiceAccountToken: false

enabledredisvolume: true
redisvolumes:
  - name: tls-data
    configMap:
      name: dbiam-redis-tls-config
  - name: data
    emptyDir: {}


enabledredisserviceport:  true
redisports:
  - port:  6379
    targetPort: redis-port
    protocol: TCP
    name: redis-port
redisservicetype: ClusterIP

enabledbackendserviceport:  true
backendports:
  - port:  80
    targetPort: web
    protocol: TCP
    name: web
backendservicetype: ClusterIP

seeding:
  enabled: true
  configmap: spsh-seeding-data-configmap
  database: dev
  
serviceMonitor:
  namespaceSelector:
    any: true
  endpoints:
    - port: "web" 

dbiam:
  selector:
    layer: dbildungs-iam
  commonLabels:
    name: dbildungs-iam

backend:
  selector:
    layer: dbildungs-iam-backend
  commonLabels:
    name: dbildungs-iam-backend

redis:
  selector:
    layer: dbildungs-iam-redis
  commonLabels:
    name: dbildungs-iam-redis

service:
  name: dbiam-backend
redisservice:
  name: redis-service

initContainers:
  - name: db-init
    command: ["node", "dist/src/console/main.js", "db", "init"]
    volumeMounts:
      - mountPath: /app/config/config.json
        subPath: config-json
        name: config-volume
        readOnly: true
      - mountPath: /app/config/secrets.json
        subPath: secrets-json
        name: secret-volume
        readOnly: true
      - mountPath: /app/sql/{{ .Values.seeding.database }}
        name: seeding-volume
        readOnly: true
  - name: db-seeding
    command: [ "node", "dist/src/console/main.js", "db", "seed", "dev", "" ]
    volumeMounts:
      - mountPath: /app/config/config.json
        subPath: config-json
        name: config-volume
        readOnly: true
      - mountPath: /app/config/secrets.json
        subPath: secrets-json
        name: secret-volume
        readOnly: true
      - mountPath: /app/sql/{{ .Values.seeding.database }}
        name: seeding-volume
        readOnly: true

containerResources:
  requests:
    cpu: 200m
    memory: 200Mi
  limits:
    cpu: 2
    memory: 4G

backendcontainer:
  ports:
    - name: web
      containerPort: 8080
  livenessProbe:
    initialDelaySeconds: 10
    httpGet:
      scheme: 'HTTP'
      port: 8080
      path: '/health'
  readinessProbe:
    initialDelaySeconds: 10
    httpGet:
      scheme: 'HTTP'
      port: 8080
      path: '/health'
  volumeMounts:
    - mountPath: /app/config/config.json
      subPath: config-json
      name: config-volume
      readOnly: true
    - mountPath: /app/config/secrets.json
      subPath: secrets-json
      name: secret-volume
      readOnly: true
    
restartPolicy: Always