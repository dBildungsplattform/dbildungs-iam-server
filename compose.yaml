version: '3'

services:
  db:
    image: postgres:15.3-alpine
    container_name: db
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=dbildungs-iam-server

  keycloak:
    image: ghcr.io/dbildungsplattform/dbildungs-iam-keycloak:latest
    container_name: keycloak
    hostname: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - PI_ADMIN_USER=admin
      - PI_ADMIN_PASSWORD=admin
      - PI_REALM=defrealm
      - PI_BASE_URL=http://privacy-idea:8080
      - STATUS_REDIRECT_URL=https://status.dev.spsh.dbildungsplattform.de/
    env_file:
      - .env
    entrypoint: '/opt/keycloak/bin/kc.sh start-dev'
    command:
      # Internal DB but still persisted in container
      - '--db=dev-file'
      # No caching
      - '--cache=local'
      # External communication happens here
      - "--hostname=http://localhost:8080"
      # Internal communication happens under a different name
      - "--hostname-backchannel-dynamic=true"
      # We have no way of checking for the health probe so we might just as well turn it off
      - '--health-enabled=false'
      # Import SPSH-Realm
      - '--import-realm'
    ports:
      - 8080:8080
      - 8443:8443
    volumes:
      - ./config/dev-realm-spsh.json:/opt/keycloak/data/import/realm.json

  keycloak-db-microservice:
    image: ghcr.io/dbildungsplattform/dbildungs-iam-server
    profiles:
      - kc-service
    build:
      context: .
    depends_on:
      - keycloak
    environment:
      NODE_ENV: dev
      DEPLOY_STAGE: dev
    command: ['node', 'dist/src/apps/kc-db-microservice/main.js']
    ports:
      - 3000:3000
    volumes:
      - source: 'config'
        target: '/app/config'
        type: bind

  redis:
    image: redis:7.2.2
    container_name: redis
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
    ports:
      - 6379:6379
    command: redis-server --requirepass password

  backend:
    profiles:
      - backend
    image: ghcr.io/dbildungsplattform/dbildungs-iam-server
    container_name: spsh-backend
    # build:
    #   context: .
    depends_on:
      keycloak:
        condition: service_started
      db:
        condition: service_started
      redis:
        condition: service_healthy
      # kafka:
      #   condition: service_healthy
      # kafka-init:
      #   condition: service_completed_successfully
    environment:
      NODE_ENV: dev
      DEPLOY_STAGE: dev
      KAFKA_BOOTSTRAPSERVERS: managedkafka-kafka-bootstrap:9093
      KAFKA_SSL_ENABLED: true
      KAFKA_SSL_CA_PATH: /tls/ca.pem
      KAFKA_SSL_CERT_PATH: /tls/client-cert.pem
      KAFKA_SSL_KEY_PATH: /tls/client-key.pem
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - source: 'config'
        target: '/app/config'
        type: bind
      - source: 'config/docker-config.json'
        target: '/app/config/config.json'
        type: bind
      - ./tls:/tls # vielleicht nur RO

  db-init:
    profiles:
      - db-init
      - db-seed
    image: ghcr.io/dbildungsplattform/dbildungs-iam-server
    build:
      context: .
    depends_on:
      - db
    environment:
      NODE_ENV: dev
      DEPLOY_STAGE: dev
    command: ['node', 'dist/src/console/main.js', 'db', 'init']
    volumes:
      - source: 'config'
        target: '/app/config'
        type: bind
      - source: 'config/docker-config.json'
        target: '/app/config/config.json'
        type: bind

  db-seed:
    profiles:
      - db-seed
    image: ghcr.io/dbildungsplattform/dbildungs-iam-server
    build:
      context: .
    depends_on:
      db:
        condition: service_started
      db-init:
        condition: service_completed_successfully
    environment:
      NODE_ENV: dev
      DEPLOY_STAGE: dev
    command: ['node', 'dist/src/console/main.js', 'db', 'seed', 'dev']
    volumes:
      - source: 'config'
        target: '/app/config'
        type: bind
      - source: 'config/docker-config.json'
        target: '/app/config/config.json'
        type: bind

  db-migrate:
    profiles:
      - db-migrate
    image: ghcr.io/dbildungsplattform/dbildungs-iam-server
    build:
      context: .
    depends_on:
      - db
    environment:
      NODE_ENV: dev
      DEPLOY_STAGE: dev
    command: ['node', 'dist/src/console/main.js', 'db', 'migration-apply']
    volumes:
      - source: 'config'
        target: '/app/config'
        type: bind
      - source: 'config/docker-config.json'
        target: '/app/config/config.json'
        type: bind

  keycloak-client-update:
    profiles:
      - keycloak-client-update
    image: ghcr.io/dbildungsplattform/dbildungs-iam-server
    build:
      context: .
    depends_on:
      - db
      - keycloak
    environment:
      NODE_ENV: dev
      DEPLOY_STAGE: dev
    command: ['node', 'dist/src/console/main.js', 'keycloak', 'update-clients', 'dev']
    volumes:
      - source: 'config'
        target: '/app/config'
        type: bind
      - source: 'config/docker-config.json'
        target: '/app/config/config.json'
        type: bind

  kafka-init:
    image: bitnami/kafka:3.9.0
    profiles:
      - third-party
    command: /init/scripts/create_topics.sh /init-data/kafka-topics.txt
    environment:
      - KAFKA_BOOTSTRAPSERVERS= managedkafka-kafka-bootstrap:9093
      - KAFKA_TOPIC_PREFIX=local.
      - KAFKA_TOPIC_PARTITIONS=1
      - KAFKA_REPLICATION_FACTOR=1
      - KAFKA_SECURITY_PROTOCOL=SSL
      - KAFKA_SSL_CA=/tls/ca.pem
      - KAFKA_SSL_CERT=/tls/client-cert.pem
      - KAFKA_SSL_KEY=/tls/client-key.pem
      # Passwort f√ºr Key-/Truststore
      - TLS_KEYSTORE_PASSWORD=${TLS_KEYSTORE_PASSWORD}
      - TLS_KEYSTORE_DIR=/jks
    volumes:
      - ./charts/dbildungs-iam-server/kafka/scripts:/init/scripts:ro
      - type: bind
        source: ./charts/dbildungs-iam-server/config/kafka-topics.txt
        target: /init-data/kafka-topics.txt
        read_only: true
      - ./tls:/tls

  openldap:
    image: osixia/openldap:1.5.0
    container_name: openldap
    profiles:
      - third-party
    command: --copy-service --loglevel debug
    ports:
      - 389:389
      - 636:636
    volumes:
      - ./config/ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom
    environment:
      - LDAP_ORGANISATION=schule-sh-de
      - LDAP_DOMAIN=schule-sh.de
      - LDAP_BASE_DN=dc=schule-sh,dc=de
      - LDAP_ADMIN_PASSWORD=admin
      - LDAP_CONFIG_PASSWORD=config
      - LDAP_RFC2307BIS_SCHEMA=true
      - LDAP_REMOVE_CONFIG_AFTER_SETUP=true
      - LDAP_TLS_VERIFY_CLIENT=never

  openldap-admin:
    image: osixia/phpldapadmin:0.9.0
    container_name: ldap-admin
    profiles:
      - third-party
    restart: 'no'
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: openldap
      PHPLDAPADMIN_HTTPS: 'false'
    depends_on:
      - openldap
    ports:
      - 9007:80
      - 4443:443

  privacy-idea:
    image: khalibre/privacyidea:latest
    container_name: privacy-idea
    profiles:
      - third-party
    ports:
      - 5000:8080
    environment:
      - PI_ADMIN_USER=admin
      - PI_ADMIN_PASSWORD=admin
      - PI_DB_TYPE=mysql
      - PI_DB_HOST=mariadb
      - PI_DB_PORT=3306
      - PI_DB_NAME=ducsxqm001
      - PI_DB_USER=admin
      - PI_DB_PASSWORD=password
      - PI_DB_VENDOR=mysql
      - PI_SUPERUSER_REALM="administrator,api"
      - PI_PAGE_TITLE=Schulportal SH
      - PI_SECRET_KEY=secret
      - PI_PEPPER=pepper
      - PI_LOGLEVEL=DEBUG
    depends_on:
      maria-db:
        condition: service_healthy
    volumes:
      - ./privacyidea/encfile:/data/privacyidea/keys/encfile
      - ./privacyidea/dummy_private.pem:/data/privacyidea/keys/private.pem
      - ./privacyidea/dummy_public.pem:/data/privacyidea/keys/public.pem

  maria-db:
    image: mariadb:latest
    container_name: mariadb
    profiles:
      - third-party
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=ducsxqm001
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=password
    healthcheck:
      test: ['CMD', 'healthcheck.sh', '--connect', '--innodb_initialized']
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - mariadb:/var/lib/mysql
      - ./privacyidea/dump.sql:/docker-entrypoint-initdb.d/dump.sql

  cron-service:
    build: ./charts/dbildungs-iam-server/cron
    profiles:
      - third-party
    environment:
      - KC_CLIENT_ID=spsh-service
      - KC_TOKEN_URL=http://keycloak:8080/realms/SPSH/protocol/openid-connect/token
      - BACKEND_ENDPOINT_URL=http://host.docker.internal:9090/api/cron/kopers-lock
      - HTTP_METHOD=PUT
      - JWKS_FILE_PATH=/keys/jwks.json
    volumes:
      - ./charts/dbildungs-iam-server/cron/scripts:/scripts
      - ./charts/dbildungs-iam-server/cron/keys/dummy_jwks.json:/keys/jwks.json:ro
    depends_on:
      - keycloak

  frontend:
    container_name: spsh-frontend
    image: ghcr.io/dbildungsplattform/schulportal-client:latest
    profiles:
      - frontend

  ingress:
    image: nginx:stable-alpine
    ports:
      - 8099:443
    profiles:
      - frontend
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    volumes:
      - source: 'nginx/default.conf'
        target: '/etc/nginx/conf.d/default.conf'
        type: bind
      # SSL configuration
      - source: 'nginx/snippets/'
        target: '/etc/nginx/snippets/'
        type: bind
      - source: 'nginx/ssl/nginx-selfsigned.key'
        target: '/etc/ssl/private/nginx-selfsigned.key'
        type: bind
      - source: 'nginx/ssl/nginx-selfsigned.crt'
        target: '/etc/ssl/certs/nginx-selfsigned.crt'
        type: bind
      - source: 'nginx/ssl/dhparam.pem'
        target: '/etc/ssl/certs/dhparam.pem'
        type: bind

volumes:
  db-data:
  mariadb:
  kafka: