nameOverride: ''
fullnameOverride: ''
namespaceOverride: ''

backendHostname: ''
keycloakHostname: ''

containerSecurityContext:
  enabled: true
  runAsUser: 1000
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ['ALL']
  seccompProfile:
    type: 'RuntimeDefault'

restartPolicy: Always
environment: dev

database:
  name: 'dbildungs_iam_server'
  host: ''
  password: ''
  username: 'dbildungs_iam_server'

ldap:
  url: ldap://dbildungs-iam-ldap.spsh-xxx.svc.cluster.local
  bindDN: cn=admin,dc=schule-sh,dc=de

auth:
  # existingSecret: Refers to a secret already present in the cluster, which is required.
  existingSecret: ''
  secretName: dbildungs-iam-server
  keycloak_adminSecret: ''
  keycloak_clientSecret: ''
  ldap_admin_password: ''
  secrets_json: ''
  frontend_sessionSecret: ''
  itslearning_enabled: ''
  itslearning_endpoint: ''
  itslearning_username: ''
  itslearning_password: ''
  pi_base_url: ''
  pi_admin_user: ''
  pi_admin_password: ''
  pi_user_resolver: ''
  pi_user_realm: ''

backend:
  replicaCount: 1
  image:
    repository: ghcr.io/dbildungsplattform/dbildungs-iam-server
    tag: ''
    pullPolicy: Always
  containerPorts:
    http: 8080
  resources:
    limits:
      cpu: 2
      memory: 4G
    requests:
      cpu: 200m
      memory: 200Mi
  startupProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 60
    failureThreshold: 5
    httpGet:
      scheme: 'HTTP'
      port: 8080
      path: '/health'
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    httpGet:
      scheme: 'HTTP'
      port: 8080
      path: '/health'
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    httpGet:
      scheme: 'HTTP'
      port: 8080
      path: '/health'
  dbseeding:
    enabled: true
    command: ['node', 'dist/src/console/main.js', 'db', 'seed', 'dev', '']
  ingress:
    enabled: true
    ingressClassName: nginx
    pathType: Prefix
    portnumber: 80
    automountServiceAccountToken: false
    paths:
      - /api
      - /docs
      - /docs-json
      - /docs-yaml
    annotations: []
  service:
    type: ClusterIP
    ports:
      http: 80
  serviceMonitor:
    enabled: true
    endpoints:
      - port: 'web'
  extraEnvVars: []
  extraVolumes: []
  volumeMounts:
    - mountPath: /app/config/config.json
      subPath: config-json
      name: config-volume
      readOnly: true
    - mountPath: /app/config/secrets.json
      subPath: secrets-json
      name: secret-volume
  extraVolumeMounts: []

redis:
  image:
    name: redis
    repository: redis
    tag: '7.2.4'
    pullPolicy: IfNotPresent
  args:
    - '/data/tls/redis.conf'
  containerPorts:
    redis: 6379
  resources:
    limits:
      cpu: 2
      memory: 4G
    requests:
      cpu: 200m
      memory: 200Mi
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 6379
    initialDelaySeconds: 15
    timeoutSeconds: 2
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 6379
    initialDelaySeconds: 5
    timeoutSeconds: 1
  startupProbe:
    enabled: true
    tcpSocket:
      port: 6379
    failureThreshold: 30
    periodSeconds: 10
  service:
    type: ClusterIP
    ports:
      redis: 6379
  extraEnvVars: []
  extraVolumes: []
  extraVolumeMounts: []


# Reference: https://github.com/bitnami/charts/tree/main/bitnami/redis-cluster
redis-cluster:
  enabled: true
  cluster:
      ## This is total number of nodes including the replicas. Meaning there will be 3 master and 3 replica
      ## nodes (as replica count is set to 1 by default, there will be 1 replica per master node).
      ## Hence, nodes = numberOfMasterNodes + numberOfMasterNodes * replicas
      nodes: 6
      ## @param cluster.replicas Number of replicas for every master in the cluster
      replicas: 1
  networkPolicy:
    enabled: false
  serviceAccount:
    create: false

  redis:
    usePassword: false
    username: "default"
    password: "password"
    extraVolumes:
      - name: redis-tls-data
        configMap:
          name: dbildungs-iam-server-redis-tls-data
          items:
            - key: gencert.sh
              path: gencert.sh
            - key: copy-tls.sh
              path: copy-tls.sh
            - key: redis.conf
              path: redis.conf
    extraVolumeMounts:
    - name: redis-tls-data
      mountPath: /tls
    podLabels:
      app.kubernetes.io/component: server-redis
  commonLabels:
    app.kubernetes.io/name: dbildungs-iam-server 